// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/proto/adder.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdderClient is the client API for Adder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdderClient interface {
	GetNumber(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Adder_GetNumberClient, error)
}

type adderClient struct {
	cc grpc.ClientConnInterface
}

func NewAdderClient(cc grpc.ClientConnInterface) AdderClient {
	return &adderClient{cc}
}

func (c *adderClient) GetNumber(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Adder_GetNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &Adder_ServiceDesc.Streams[0], "/api.Adder/GetNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &adderGetNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Adder_GetNumberClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type adderGetNumberClient struct {
	grpc.ClientStream
}

func (x *adderGetNumberClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdderServer is the server API for Adder service.
// All implementations must embed UnimplementedAdderServer
// for forward compatibility
type AdderServer interface {
	GetNumber(*GetRequest, Adder_GetNumberServer) error
	mustEmbedUnimplementedAdderServer()
}

// UnimplementedAdderServer must be embedded to have forward compatible implementations.
type UnimplementedAdderServer struct {
}

func (UnimplementedAdderServer) GetNumber(*GetRequest, Adder_GetNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNumber not implemented")
}
func (UnimplementedAdderServer) mustEmbedUnimplementedAdderServer() {}

// UnsafeAdderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdderServer will
// result in compilation errors.
type UnsafeAdderServer interface {
	mustEmbedUnimplementedAdderServer()
}

func RegisterAdderServer(s grpc.ServiceRegistrar, srv AdderServer) {
	s.RegisterService(&Adder_ServiceDesc, srv)
}

func _Adder_GetNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdderServer).GetNumber(m, &adderGetNumberServer{stream})
}

type Adder_GetNumberServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type adderGetNumberServer struct {
	grpc.ServerStream
}

func (x *adderGetNumberServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Adder_ServiceDesc is the grpc.ServiceDesc for Adder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Adder",
	HandlerType: (*AdderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNumber",
			Handler:       _Adder_GetNumber_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/adder.proto",
}
